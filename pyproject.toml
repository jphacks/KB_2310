[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[project]
name = "KB_2310"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "sqlalchemy>=2.0.22",
    "fastapi>=0.104.0",
    "pydantic>=2.4.2",
    "fastapi-amis-admin>=0.6.7",
    "email-validator>=2.1.0.post1",
    "passlib>=1.7.4",
    "bcrypt>=4.0.1",
    "casbin>=1.33.0",
]

[tool.pdm.dev-dependencies]
lint = [
    "flake8>=6.1.0",
    "black>=23.10.1",
    "isort>=5.12.0"
]
test = [
    "uvicorn[standard] >=0.19.0,<1.0",
    "pytest >=6.2.4",
    "pytest-asyncio>=0.17",
    "aiosqlite>=0.15.0",
    "python-jose==3.3.0",
    "jinja2 >=2.11.2,<4.0.0",
    "ujson>=5.5.0",
    "requests>=2.28.1",
    "pre-commit>=2.20.0",
    "httpx>=0.23.3",
]

[project.optional-dependencies]
jwt = [
    "python-jose==3.3.0",
]
redis = ["redis>=4.2.0"]

# pytest
[tool.pytest.ini_options]
minversion = "6.0"
testpaths = [
    "tests",
]
# pytest-asyncio
asyncio_mode = "auto"
filterwarnings = [
    "ignore::RuntimeWarning",
]

[tool.isort]
profile = "black"
atomic = true
filter_files = true

[tool.black]
line-length = 130
include = '\.pyi?$'

[tool.flake8]
max-line-length = 130
exclude = 'venv,.git,__pycache__,__init__.py,dev'
ignore = [
  "B008",
  "W503"
]

[tool.ruff]
select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # pyflakes
    "I", # isort
    "C", # flake8-comprehensions
    "B", # flake8-bugbear
]
ignore = [
    "E501", # line too long
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
    "E711", # comparison to None should be 'if cond is None:';sqlalchemy is not support.
    "E712", # comparison to True should be 'if cond is True:' or 'if cond:'
]
# Same as Black.
line-length = 130

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.pdm.scripts]
dev = "uvicorn api.index:app --reload"
black = "black ."
isort = "isort ."
flake8 = "flake8 --exit-zero ."
mypy = "mypy --show-column-numbers ."
test = "pytest tests --cov=app --cov-report=term --cov-report=xml"
format = { composite = ["black", "isort"] }
lint = { composite = ["flake8", "mypy"] }
check = { composite = ["format", "lint", "test"] }
